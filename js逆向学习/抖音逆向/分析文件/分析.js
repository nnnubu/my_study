require('../env.js')

function generate8(count = 0, list = []) {
    count += 1
    let f1 = function () {
        s[6] = Math.random() * 65535
        s[7] = (Math.random() * 65535) & 255
        s[8] = s[6] >> 8
    }
    let f2 = function () {
        s[9] = (s[7] & s[4]) | (1 & s[5])
        s[10] = (s[7] & s[5]) | (1 & s[4])
        s[11] = (s[8] & s[4]) | (0 & s[5])
        s[12] = (s[8] & s[5]) | (0 & s[4])
        list = list.concat([s[9], s[10], s[11], s[12]])
    }
    if (count === 1 || count === 3) {
        // count === 1 ? (list1 = [s[9], s[10], s[11], s[12]]) : (list2 = [s[9], s[10], s[11], s[12]])
        count === 1 ? function () {
            f1()
            f2()
            list = generate8(count, list)
        }() : function () {
            f2()
            return list
        }()
    } else if (count === 2) {
        f1()
        s[7] = (Math.random() * 240) >> 0
        v[0] = ((Math.random() * 255) >> 0) & 77
        v[0] += 2 + 16 + 32 + 128
        s[8] = v[0]
        list = generate8(count, list)
    }
    return list
// [(s[7] & s[4]) | (1 & s[5]), (s[7] & s[5]) | (1 & s[4]), (s[8] & s[4]) | (0 & s[5]), (s[8] & s[5]) | (0 & s[4])]
// 要执行三遍，第一遍生成list1,第三遍生成list2
// 第二遍生成最后s的基础并把s[7]改了，然后第三遍s[8]要把值换成v[0] 得到最后结果
// 但是这里我可以把修改全放在第二遍
}

// 前缀乱码 已完工
function generate4() {
    timestamp = Date.now()
    s = [
        [
            {
                "5": {
                    "aid": 6383,
                    "pageId": 6241,
                    "boe": false,
                    "ddrt": 8.5,
                    "paths": {
                        "include": [
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                            {}
                        ],
                        "exclude": [
                            {}
                        ]
                    },
                    "track": {
                        "mode": 0,
                        "delay": 300,
                        "paths": []
                    },
                    "slU": "",
                    "dump": true,
                    "rpU": "",
                    "ic": 8.5
                }
            },
            {},
            "dhzx",
            timestamp,
            1,
            {
                "name": "Chrome"
            },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null
        ],
        {
            "0": [
                1,
                0
            ]
        },
        [
            1,
            0
        ],
        0,//有时候又是1或2
        170,
        85
    ]
    s[6] = Math.random() * 65535
    s[7] = s[6] & 255     //s[6] & 255    (Math.random() * 65535) & 255
    s[8] = (Math.random() * 40) >> 0    //(s[6] >> 8) & 255 //(Math.random() * 40) >> 0
    s[9] = (s[7] & s[4]) | (3 & s[5])
    s[10] = (s[7] & s[5]) | (3 & s[4])
    s[11] = (s[8] & s[4]) | (82 & s[5])
    s[12] = (s[8] & s[5]) | (82 & s[4])
    let array = [s[9], s[10], s[11], s[12]]
    let str = String.fromCharCode.apply(null, array)
    let hexStr = str.split('').map(char => {
        let hex = char.charCodeAt(0).toString(16);
        return '/x' + hex.padStart(2, '0');
    }).join('');
    return hexStr
    // [(s[7] & s[4]) | (3 & s[5]), (s[7] & s[5]) | (3 & s[4]), (s[8] & s[4]) | (82 & s[5]), (s[8] & s[5]) | (82 & s[4])]S
}

// list[4]  已完工
function generate4_append() {
    let timestamp2 = Date.now();
    str = ((timestamp2 + 3) & 255) + Z[303]
    n1 = str.charCodeAt(0)
    n2 = str.charCodeAt(1)
    n3 = str.charCodeAt(2)
    n4 = str.charCodeAt(3)
    list4 = [n1, n2, n3, n4].filter(value => !isNaN(value));
    return list4
}

function generate43_append() {
    list43 = []
    str = '839|975|1920|1080|1920|1080|1920|1080|Win32'
    for (let i = 0; i < str.length; i++) {
        list43 = list43.concat(str.charCodeAt(i))
    }
    return list43
}

function generate1_append(list8) {
    // list1和generate8有关
    // temp = list8里面的每个值^一遍    然后再对s里面的多个数据进行^运算，所以目前的任务是分析s里面每个数据的生成方法 生成方法设置断点g[0].length == 1834  或 == 207
    list = list8.concat([41, 21, 6, 4, 247, 191, 37, 22, 151, 1, 1, 0, 1, 0, 0, 0, 0, 14, 0, 0, 0, 138, 55, 158, 82, 177, 44, 144, 18, 244, 245, 191, 37, 22, 151, 1, 3, 97, 24, 0, 0, 239, 24, 0, 0, 43, 0, 4]) //样本
    temp = list[0]
    for (let i = 1; i < list.length; i++) {
        temp ^= list[i]
    }
    list1 = [temp]
    return list1
}   //用样本

//list138
function generate138() {
    // 剩下130长度数组的生成规律
    timestamp = Date.now()
    o = [
        39,
        0,
        54,
        0,
        3,
        38,
        145,
        54,
        0,
        4,
        38,
        110,
        54,
        0,
        5,
        38,
        66,
        54,
        0,
        6,
        38,
        189,
        54,
        0,
        7,
        38,
        44,
        54,
        0,
        8,
        38,
        211,
        54,
        0,
        9,
        38,
        0,
        54,
        0,
        10,
        74,
        0,
        10,
        74,
        0,
        2,
        30,
        25,
        32,
        41,
        229,
        74,
        0,
        10,
        38,
        2,
        68,
        74,
        0,
        2,
        30,
        25,
        32,
        41,
        155,
        60,
        259,
        18,
        30,
        261,
        0,
        0,
        38,
        1000,
        45,
        38,
        255,
        12,
        54,
        0,
        11,
        74,
        0,
        11,
        74,
        0,
        4,
        12,
        74,
        0,
        2,
        74,
        0,
        10,
        8,
        74,
        0,
        5,
        12,
        51,
        54,
        0,
        12,
        74,
        0,
        11,
        74,
        0,
        6,
        12,
        74,
        0,
        2,
        74,
        0,
        10,
        38,
        1,
        68,
        8,
        74,
        0,
        7,
        12,
        51,
        54,
        0,
        13,
        74,
        0,
        11,
        74,
        0,
        8,
        12,
        74,
        0,
        2,
        74,
        0,
        10,
        38,
        2,
        68,
        8,
        74,
        0,
        9,
        12,
        51,
        54,
        0,
        14,
        74,
        0,
        2,
        74,
        0,
        10,
        8,
        74,
        0,
        4,
        12,
        74,
        0,
        2,
        74,
        0,
        10,
        38,
        1,
        68,
        8,
        74,
        0,
        6,
        12,
        51,
        74,
        0,
        2,
        74,
        0,
        10,
        38,
        2,
        68,
        8,
        74,
        0,
        8,
        12,
        51,
        54,
        0,
        15,
        74,
        0,
        3,
        18,
        30,
        79,
        74,
        0,
        12,
        74,
        0,
        13,
        74,
        0,
        14,
        74,
        0,
        15,
        0,
        4,
        26,
        53,
        47,
        74,
        0,
        3,
        18,
        30,
        79,
        74,
        0,
        2,
        74,
        0,
        10,
        8,
        0,
        1,
        26,
        74,
        0,
        2,
        74,
        0,
        10,
        38,
        1,
        68,
        8,
        17,
        18,
        74,
        0,
        3,
        18,
        30,
        79,
        74,
        0,
        2,
        74,
        0,
        10,
        38,
        1,
        68,
        8,
        0,
        1,
        26,
        74,
        0,
        10,
        38,
        3,
        68,
        61,
        0,
        10,
        16,
        26,
        53,
        -240,
        74,
        0,
        3,
        76
    ]
    s = [
        [
            {
                "5": {
                    "aid": 6383,
                    "pageId": 6241,
                    "boe": false,
                    "ddrt": 8.5,
                    "paths": {
                        "include": [
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                            {}
                        ],
                        "exclude": [
                            {}
                        ]
                    },
                    "track": {
                        "mode": 0,
                        "delay": 300,
                        "paths": []
                    },
                    "slU": "",
                    "dump": true,
                    "rpU": "",
                    "ic": 8.5
                }
            },
            {},
            "dhzx",
            timestamp,
            1,
            {
                "name": "Chrome"
            },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null
        ],
        {
            "0": [
                1,
                0
            ]
        },
        [
            1,
            0
        ],
        0,//有时候又是1或2
        170,
        85
    ]
    v = []
    //这个数组列表由前面生成的50+43+4+1也有可能是+3+1
    list8 = generate8()
    s[2] = [].concat(list50, generate43_append(), generate4_append(), generate1_append(list8))

    s[3] = []
    // s[4] ~ s[10] = o[6] 索引每次加5取到o[36]
    // 第一次生成主体，s[4]到s[10],后面每生成一个长度为4的数组就加3
    for (let i = 4, j = 6; j <= 36; i++, j += 5) {
        s[i] = o[j];
    }
    list130 = []
    for (s[10]; list130.length < 128; s[10] += 3) {
        // -----------------------------------------------------------------------------------------
        s[11] = Math.random() * 1000 & 255
        s[12] = (s[11] & s[4]) | (s[2][s[10]] & s[5])
        s[13] = (s[11] & s[6]) | (s[2][s[10] + o[117]] & s[7])          // o[117] == 0
        s[14] = (s[11] & s[8]) | (s[2][s[10] + o[142]] & s[9])             // o[142] == 2
        s[15] = ((s[2][s[10]] & s[4]) | (s[2][s[10] + o[171]] & s[6])) | (s[2][s[10] + o[186]] & s[8])
        list130 = list130.concat([s[12], s[13], s[14], s[15]])
        // -----------------------------------------------------------------------------------------
    }

    // s[10] o[271] o[275] s[10] list[98] s[10] o[55]
    // 重复以上步骤,直到长度达到128,也就是s[10]的长度到96的时候
    // list98[s[10]] 加上去
    list130 = list130.concat([s[2][s[10]]])
    // list98[s[10] + o[243]] 加上去
    if (s[2].length === 98) {
        list130 = list130.concat([s[2][s[10] + o[243]]])
    }
    list138 = [].concat(list8, list130)
    return list138
}


//list50放弃了直接模拟了，采用一次样本好了
list50 = [
    1,
    14,
    144,
    191,
    0,
    247,
    0,
    0,
    1,
    55,
    1,
    3,
    158,
    24,
    4,
    138,
    151,
    0,
    191,
    239,
    21,
    44,
    37,
    0,
    244,
    0,
    37,
    22,
    6,
    24,
    0,
    0,
    18,
    82,
    0,
    0,
    151,
    97,
    177,
    0,
    1,
    0,
    0,
    41,
    245,
    22,
    43,
    0,
    4,
    0
]   //变

list43 = [
    56,
    51,
    57,
    124,
    57,
    55,
    53,
    124,
    49,
    57,
    50,
    48,
    124,
    49,
    48,
    56,
    48,
    124,
    49,
    57,
    50,
    48,
    124,
    49,
    48,
    56,
    48,
    124,
    49,
    57,
    50,
    48,
    124,
    49,
    48,
    56,
    48,
    124,
    87,
    105,
    110,
    51,
    50
]   //根据屏幕长宽 已解决   '839|975|1920|1080|1920|1080|1920|1080|Win32'.charCodeAt(i) i从0一直整到42加入list43，有时候长度也不是43它看的是前面字符的长度
list4 = [
    49,
    49,
    57,
    44
]   //变 已解决
// 下一次的工作：var m = n.apply(d, e)点处断点，先v.includes("839|975|1920|1080|1920|1080|1920|1080|Win32") || s.includes("839|975|1920|1080|1920|1080|1920|1080|Win32")再e==[42]

temp1 = [
    1,
    14,
    144,
    144,
    0,
    242,
    0,
    0,
    1,
    237,
    1,
    3,
    49,
    24,
    6,
    149,
    151,
    0,
    144,
    239,
    21,
    44,
    203,
    0,
    244,
    0,
    203,
    16,
    6,
    24,
    0,
    0,
    18,
    82,
    0,
    0,
    151,
    97,
    177,
    0,
    1,
    0,
    0,
    41,
    239,
    16,
    43,
    0,
    4,
    0
] //下一次的工作    了解list50的生成规律，以及最后那个list1  也就是上面的[193]的生成规律，目前未知list50的生成位置，最后一个数据的生成位置在generate8后面
temp2 = [
    1,
    4,
    99,
    37,
    0,
    241,
    0,
    0,
    1,
    90,
    1,
    3,
    171,
    24,
    4,
    154,
    151,
    0,
    37,
    239,
    21,
    44,
    198,
    0,
    192,
    38,
    198,
    16,
    6,
    24,
    0,
    0,
    102,
    82,
    0,
    0,
    151,
    97,
    177,
    1,
    1,
    0,
    0,
    41,
    239,
    16,
    43,
    0,
    4,
    0
]  //大部分相同，但是每次取的关于s的键值都不太一样


function test() {
    let foundDifference = false;

    for (let i = 0; i < temp1.length; i++) {
        if (temp1[i] !== temp2[i]) {
            console.log(`找到不同的元素: temp1[${i}] = ${temp1[i]}, temp2[${i}] = ${temp2[i]}`);
            foundDifference = true;
        }
    }

    if (!foundDifference) {
        console.log("两个数组中的元素完全相同");
    } else {
        console.log("所有不同的元素已输出");
    }
}

module.exports = {generate4, generate138}